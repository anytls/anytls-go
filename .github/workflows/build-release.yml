# .github/workflows/build-release.yml

name: Build and Release

# 控制 workflow 的触发时机
on:
  # 允许手动从 Actions 标签页触发此 workflow
  workflow_dispatch:
  # 当一个以 "v" 开头的 tag (例如 v1.0, v0.0.8) 被推送到仓库时触发
  push:
    tags:
      - 'v*'

# 定义 workflow 中运行的作业
jobs:
  # 定义一个名为 "build-and-release" 的作业
  build-and-release:
    # 指定作业运行的虚拟环境
    runs-on: ubuntu-latest

    # 定义作业中的一系列步骤
    steps:
      # 步骤 1: 检出你的仓库代码
      # 使用 actions/checkout@v4 这个预定义的 action
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Go 环境
      # 使用 actions/setup-go@v5 这个 action
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 你可以指定需要的 Go 版本

      # 步骤 3: 获取依赖项
      # 运行 go mod tidy 来确保 go.mod 和 go.sum 是最新的
      - name: Tidy modules
        run: go mod tidy

      # 步骤 4: 交叉编译二进制文件
      # 为不同的平台 (Linux amd64, arm64) 进行编译
      - name: Cross-compile binaries
        run: |
          # 编译服务端
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-s -w" -o server_linux_amd64 ./cmd/server
          GOOS=linux GOARCH=arm64 go build -trimpath -ldflags="-s -w" -o server_linux_arm64 ./cmd/server
          # 编译客户端
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-s -w" -o client_linux_amd64 ./cmd/client
          GOOS=linux GOARCH=arm64 go build -trimpath -ldflags="-s -w" -o client_linux_arm64 ./cmd/client
          # 如果需要 Windows 版本
          # GOOS=windows GOARCH=amd64 go build -trimpath -ldflags="-s -w" -o client_windows_amd64.exe ./cmd/client

      # 步骤 5: 创建 Release 并上传编译好的文件
      # 使用 softprops/action-gh-release@v2 这个 action
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # 从编译好的文件中创建附件
          files: |
            server_linux_amd64
            server_linux_arm64
            client_linux_amd64
            client_linux_arm64
            # client_windows_amd64.exe
        env:
          # GitHub 会自动提供这个 token，用于授权 action 创建 Release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
